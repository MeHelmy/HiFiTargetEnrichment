import re
from pathlib import Path


configfile: "workflow/config.yaml"


## prefix every task command with:
# set -o pipefail  # trace ERR through pipes
# umask 002  # group write permissions
# export TMPDIR={config['tmpdir']}  # configure temp directory
# export SINGULARITY_TMPDIR={config['tmpdir']}  # configure temp directory
shell.prefix(
    f"set -o pipefail; umask 002; export TMPDIR={config['tmpdir']}; export SINGULARITY_TMPDIR={config['tmpdir']}; "
)

batch = config["batch"]
# Get expected barcodes and sample map from standard barcode_biosample_csv used in SL
# map both directions
barcode2sample = dict( row.split(',') 
                       for i,row in enumerate( open( config["biosamples"] ).read().strip().split('\n') )
                       if i > 0 )
sample2barcode = { v:k for k,v in barcode2sample.items() }
ref = config["ref"]["shortname"]
print(f"Processing batch {batch} with reference {ref}.")

# scan smrtcells/capture/ready for inputs
# uBAMs have priority over FASTQs if both are available
# samples and files are expected to match one of the following patterns:
ubam_pattern = re.compile(
    r"smrtcells/capture/ready/(?P<batch>[.A-Za-z0-9_-]+)/(?P<movie>m\d{5}[Ue]?_\d{6}_\d{6}).(ccs|hifi_reads).bam"
)
ubam_dict = {}
fastq_pattern = re.compile(
    r"smrtcells/capture/ready/(?P<batch>[.A-Za-z0-9_-]+)/(?P<movie>m\d{5}[Ue]?_\d{6}_\d{6}).fastq.gz"
)
fastq_dict = {}

for infile in Path("smrtcells/capture/ready").glob(f"{batch}/*.bam"):
    ubam_match = ubam_pattern.search(str(infile))
    if ubam_match:
        # create a dict-of-dict to link samples to movie context to uBAM filenames
        ubam_dict[ubam_match.group("movie")] = str(infile)
for infile in Path("smrtcells/capture/ready").glob(f"{batch}/*.fastq.gz"):
    fastq_match = fastq_pattern.search(str(infile))
    if fastq_match:
        # create a dict-of-dict to link samples to movie context to FASTQ filenames
        fastq_dict[fastq_match.group("movie")] = str(infile)

# create a list of movies from the uBAMs and FASTQs
movies = list(set(list(ubam_dict.keys()) + list(fastq_dict.keys())))
# create a list of aBAMs that will be generated
#abam_dict = { sample : f"batches/{batch}/{sample}/aligned/{sample}.{ref}.bam" 
#              for sample in sample2barcode.keys() }

# build a list of targets
# starting with demuxing of each movie
targets = [
            f'batches/{batch}/demux/{movie}/demultiplex.{barcode}.bam'
            for movie in movies
            for barcode in sample2barcode.values()
           ]


include: "rules/common_capture.smk"
include: "rules/demux.smk"
include: "rules/dedup.smk"
include: "rules/pbmm2_capture.smk"
include: "rules/deepvariant_capture.smk"
include: "rules/whatshap_capture.smk"
include: "rules/pbsv_capture.smk"
include: "rules/hifiasm_capture.smk"

# DV
targets.extend(
    [
        f"batches/{batch}/{sample}/deepvariant/{sample}.{ref}.deepvariant.{suffix}"
        for suffix in [
            "vcf.gz",
            "vcf.gz.tbi",
            "g.vcf.gz",
            "g.vcf.gz.tbi",
            "visual_report.html",
            "vcf.stats.txt",
        ]
        for sample in sample2barcode.keys()
    ]
)
# WH
targets.extend(
    [
        f"batches/{batch}/{sample}/whatshap/{sample}.{ref}.deepvariant.{suffix}"
        for suffix in [
            "phased.vcf.gz",
            "phased.vcf.gz.tbi",
            "phased.gtf",
            "phased.tsv",
            "phased.blocklist",
            "haplotagged.bam",
            "haplotagged.bam.bai",
        ]
        for sample in sample2barcode.keys()
    ]
)
#SV
targets.extend(
    [
        f"batches/{batch}/{sample}/pbsv/{sample}.{ref}.pbsv.vcf"
        for sample in sample2barcode.keys()
    ]
)

# HiFiasm
targets.extend(
    [
        f"batches/{batch}/{sample}/hifiasm/{sample}.asm.{ref}.htsbox.vcf.stats.txt"
        for sample in sample2barcode.keys()
    ]
)


# QC extras
if config['QC']['runQC']:
    include: "rules/qc.smk"

ruleorder: pbmm2_align_ubam > pbmm2_align_fastq
ruleorder: deepvariant_postprocess_variants_round2 > deepvariant_postprocess_variants_round1 > tabix_vcf


rule all:
    input:
        targets,
